package MegreSort;

public class merge_sort {

    public static void mergesort(int[] arr) {
        int n = arr.length;
        if (n <= 1) return; // Base case: already sorted

        int mid = n / 2;
        int[] a = new int[mid];
        int[] b = new int[n - mid];

        // Copying elements
        for (int i = 0; i < mid; i++) {
            a[i] = arr[i];
        }
        for (int i = 0; i < n - mid; i++) {
            b[i] = arr[i + mid];
        }

        // Recursive calls
        mergesort(a);
        mergesort(b);

        // Merge the sorted sub-arrays back into arr
        merge(a, b, arr); // Corrected merge call
    }

    public static void merge(int[] a, int[] b, int[] arr) {
        int i = 0, j = 0, k = 0;
        while (i < a.length && j < b.length) {
            if (a[i] <= b[j]) {
                arr[k++] = a[i++];
            } else {
                arr[k++] = b[j++];
            }
        }
        while (i < a.length) {
            arr[k++] = a[i++];
        }
        while (j < b.length) {
            arr[k++] = b[j++];
        }
    }

    public static void print(int[] arr) {
        for (int ele : arr) {
            System.out.print(ele + " ");
        }
        System.out.println();
    }

    public static void main(String[] args) {
        int[] arr = {80, 30, 50, 20, 60, 10, 70, 40};
        System.out.print("Original array: ");
        print(arr);
        mergesort(arr);
        System.out.print("Sorted array: ");
        print(arr);
    }
}
